'''
File to store the all the classes
'''

from firebase_admin import firestore
db = firestore.client()


class User(object):
    """
    User Class that will be stored in the firestore database

    Attributes:
        uid (str): UID of the user generated by the auth database
        tuid (int): integer id of the user, increments with each user createed
        role (str): self-described role of the user
        picture (str): url of the display photo of the user
        DOB (str): date of birth of the suer
        is_admin (boolean): admin status of the user
        is_banned (boolean): ban status of the user
        is_removed (boolean): removal status of the user
        achievements (list): list of achievements the user has obtained
        projects (list): list of project ids that the user has joined
        pinned_projects (list): list of project ids that the user has pinned
        epics (list): list of epic ids that the user has been assigned
        tasks (list): list of tasks ids that the user has been assigned
        subtasks (list): list of subtask ids that the user has been assigned
        connections (list): list of uids of users that the User has connected to
        reputation (dict): a dict of reviews and averaged scores
    """
    def __init__(self, uid, tuid, role, picture, DOB, is_admin, is_banned, achievements, projects, pinned_projects, tasks, subtasks, connections, reputation, workload):
        self.uid = uid
        self.tuid = tuid
        self.role = role
        self.picture = picture
        self.DOB = DOB
        self.is_admin = is_admin
        self.is_banned = is_banned
        self.achievements = achievements
        self.projects = projects
        self.pinned_projects = pinned_projects
        self.tasks = tasks
        self.subtasks = subtasks
        self.connections = connections
        self.reputation = reputation
        self.workload = workload
        
        
    def to_dict(self):
        return {
            'uid': self.uid, 
            'tuid': self.tuid,
            'role': self.role,
            'picture': self.picture,
            'DOB': self.DOB,
            'is_admin': self.is_admin,
            'is_banned': self.is_banned,
            "achievements": self.achievements,
            "projects": self.projects,
            "pinned_projects": self.pinned_projects,
            "tasks": self.tasks,
            "subtasks": self.subtasks,
            "connections": self.connections,
            "reputation": self.reputation,
            "workload": self.workload
        }

class Epic():
    """
    An Epic class that will be stored in firestore.

    Attributes:
        eid (int): an integer that corresponds to a specific epic
        pid (int): an integer that corresponds to a specific project this task belongs to
        title (str): a string that corresponds to the task's title
        tasks (list): a list of tuids (int) corresponding to the subtasks belonging to this task
        description (str): a string that corresponds to the task's description
        colour (str): a string that corresponds to the hexadecimal code for the colour for the epic

    """
    def __init__(self, eid, pid, tasks, title, description, colour):
        self.eid = eid
        self.pid = pid
        self.title = title
        self.tasks = tasks
        self.description = description
        self.colour = colour

    def to_dict(self):
        return {
            'eid': self.eid,
            'pid': self.pid,
            'title': self.title,
            'tasks': self.tasks,
            'description': self.description,
            'colour': self.colour
        }    

class Task():
    """
    A Task class that will be stored in firestore.

    Attributes:
        tid (int): an integer that corresponds to a specific task
        pid (int): an integer that corresponds to a specific project this task belongs to
        eid (int): an integer that corresponds to a specific epic this task belongs to
        assignees (list): a list of UIDs (str) corresponding to who is assigned to this task
        subtasks (list): a list of STIDs (int) corresponding to 
        title (str): a string that corresponds to the task's title
        description (str): a string that corresponds to the task's description
        deadline (int): an int that corresponds to the unix time the task is supposed to be finished
        workload (int): an int that corresponds to the estimated number of days required to finish this task
        priority (str): a string that corresponds to the prioty of the task. It is either "High", "Moderate", or "Low"
        status (str): a string that corresponds to the task's status. It is either "Not Started", "In Progress", "Testing/Reviewing","Blocked" or "Done"
        comments (list): a list of CIDs (int) corresponding to a specific comment
        flagged (boolean): a boolean that corresponds to whether the task has been flagged or not
        completed (int): an int that corresponds to the unix time that the task has been completed
    """
    def __init__(self, tid, pid, eid, assignees, subtasks, title, description, deadline, workload, priority, status, comments, files, flagged, completed):
        self.tid = tid
        self.pid = pid
        self.eid = eid
        self.assignees = assignees
        self.title = title
        self.description = description
        self.deadline = deadline
        self.workload = workload
        self.priority = priority
        self.status = status
        self.subtasks = subtasks
        self.comments = comments
        self.files = files
        self.flagged = flagged
        self.completed = completed

    def to_dict(self):
        return {
            'tid': self.tid,
            'pid': self.pid,
            'eid': self.eid,
            'assignees': self.assignees,
            'subtasks': self.subtasks,
            'title': self.title,
            'description': self.description,
            'deadline': self.deadline,
            'workload': self.workload,
            'priority': self.priority,
            'status': self.status,
            'comments': self.comments,
            'files': self.files,
            'flagged': self.flagged,
            'completed': self.completed
        }

class Subtask():
    """
    A Subtask class that will be stored in firestore.

    Attributes:
        stid (int): an integer that corresponds to a specific subtask
        tid (int): an integer that corresponds to a specific task
        pid (int): an integer that corresponds to a specific project this task belongs to
        eid (int): an integer that corresponds to a specific epic this task belongs to
        assignees (list): a list of UIDs (str) corresponding to who is assigned to this task
        title (str): a string that corresponds to the task's title
        description (str): a string that corresponds to the task's description
        deadline (int): an int that corresponds to the unix time the task is supposed to be finished
        workload (int): an int that corresponds to the estimated number of days required to finish this task
        priority (str): a string that corresponds to the prioty of the task. It is either "High", "Moderate", or "Low"
        status (str): a string that corresponds to the task's status. It is either "Not Started", "In Progress", "Testing/Reviewing", or "Done"

    """
    def __init__(self, stid, tid, pid, eid, assignees, title, description, deadline, workload, priority, status):
        self.stid = stid
        self.tid = tid
        self.pid = pid
        self.eid = eid
        self.assignees = assignees
        self.title = title
        self.description = description
        self.deadline = deadline
        self.workload = workload
        self.priority = priority
        self.status = status

    def to_dict(self):
        return {
            'stid': self.stid,
            'tid': self.tid,
            'pid': self.pid,
            'eid': self.eid,
            'assignees': self.assignees,
            'title': self.title,
            'description': self.description,
            'deadline': self.deadline,
            'workload': self.workload,
            'priority': self.priority,
            'status': self.status
        }
    
class Comments():
    """
    A Comment class that will be stored in firestore.

    Attributes:
        cid (int): an int that corresponds to this specific comment
        uid (str): UID of the user generated by the auth database
        body (str): a string that the comment comprises of
        time (int): an int that corresponds to the unix time that the comment was commented on
    """
    def __init__(self, cid, uid, body, time):
        self.cid = cid
        self.uid = uid
        self.body = body
        self.time = time
    
    def to_dict(self):
        return {
            'cid': self.cid,
            'uid': self.uid,
            'body': self.body,
            'time': self.time
        }
    
class Review():
    """
    A Review class that is stored in User in firestore.

    Attributes:
        reviewee_uid (str): uid of the user that is being reviewed
        reviewer_uid (str): uid of the user that left the review
        pid (int): pid of the project that is shared between the reviewer and the reviewee
        date (str): date of when the review was written, in "%d/%m/%Y" format
        communication (int): 
        time_management (int):
        task_quality (int):
        comment (str): 
    """

    def __init__(self, reviewer_uid, reviewee_uid, pid, date, communication, time_management, task_quality, comment):
        self.reviewer_uid = reviewer_uid
        self.reviewee_uid = reviewee_uid
        self.pid = pid
        self.date = date
        self.communication = communication
        self.time_management = time_management
        self.task_quality = task_quality
        self.comment = comment

    def to_dict(self):
        return {
            "reviewer_uid": self.reviewer_uid,
            "reviewee_uid": self.reviewee_uid,
            "pid": self.pid,
            "date": self.date,
            "communication": self.communication,
            "time_management": self.time_management,
            "task_quality": self.task_quality,
            "comment": self.comment
        }

class Project():
    """
    A Project class that will be stored in firestore.

    Attributes:
     - 
     - 
    """
    def __init__(self, pid, uid, name, description, status, due_date, team_strength, picture, project_members, epics, tasks, subtasks):
        self.pid = pid
        self.uid = uid
        self.name = name
        self.description = description
        self.status = status
        self.due_date = due_date
        self.team_strength = team_strength
        self.picture = picture
        self.project_members = project_members
        self.epics = epics
        self.tasks = tasks
        self.subtasks = subtasks
    
    def to_dict(self):
        return {
            "pid": self.pid,
            "uid": self.uid,
            "name": self.name,
            "description": self.description,
            "status": self.status,
            "due_date": self.due_date,
            "team_strength": self.team_strength,
            "picture": self.picture,
            "project_members": self.project_members,
            "epics": self.epics,
            "tasks": self.tasks,
            "subtasks": self.subtasks
        }

def get_project(pid):
    doc = db.collection("projects").document(str(pid)).get()

    project = Project(
        doc.get("pid"),
        doc.get("uid"),
        doc.get("name"),
        doc.get("description"),
        doc.get("status"),
        doc.get("due_date"),
        doc.get("team_strength"),
        doc.get("picture"),
        doc.get("project_members"),
        doc.get("epics"),
        doc.get("tasks"),
        doc.get("subtasks")
    )

    return project.to_dict()